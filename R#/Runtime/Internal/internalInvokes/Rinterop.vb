#Region "Microsoft.VisualBasic::75b54ca873b7904e85e514a890f20aad, E:/GCModeller/src/R-sharp/R#//Runtime/Internal/internalInvokes/Rinterop.vb"

    ' Author:
    ' 
    '       asuka (amethyst.asuka@gcmodeller.org)
    '       xie (genetics@smrucc.org)
    '       xieguigang (xie.guigang@live.com)
    ' 
    ' Copyright (c) 2018 GPL3 Licensed
    ' 
    ' 
    ' GNU GENERAL PUBLIC LICENSE (GPL3)
    ' 
    ' 
    ' This program is free software: you can redistribute it and/or modify
    ' it under the terms of the GNU General Public License as published by
    ' the Free Software Foundation, either version 3 of the License, or
    ' (at your option) any later version.
    ' 
    ' This program is distributed in the hope that it will be useful,
    ' but WITHOUT ANY WARRANTY; without even the implied warranty of
    ' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    ' GNU General Public License for more details.
    ' 
    ' You should have received a copy of the GNU General Public License
    ' along with this program. If not, see <http://www.gnu.org/licenses/>.



    ' /********************************************************************************/

    ' Summaries:


    ' Code Statistics:

    '   Total Lines: 62
    '    Code Lines: 18
    ' Comment Lines: 39
    '   Blank Lines: 5
    '     File Size: 2.74 KB


    '     Module Rinterop
    ' 
    '         Function: Rcall, Rload
    ' 
    ' 
    ' /********************************************************************************/

#End Region

Imports Microsoft.VisualBasic.CommandLine.Reflection
Imports SMRUCC.Rsharp.Runtime.Internal.Object
Imports SMRUCC.Rsharp.Runtime.Interop

Namespace Runtime.Internal.Invokes

    Module Rinterop

        ''' <summary>
        ''' Modern Interfaces to VisualBasic.NET code
        ''' 
        ''' Functions to pass R# objects to compiled VisualBasic.NET code that has been loaded into R#.
        ''' </summary>
        ''' <param name="NAME">
        ''' a character string giving the name of a C function, or an object 
        ''' of class "NativeSymbolInfo", "RegisteredNativeSymbol" or 
        ''' "NativeSymbol" referring to such a name.</param>
        ''' <param name="PACKAGE">
        ''' If supplied, confine the search For a character String .NAME To 
        ''' the DLL given by this argument (plus the conventional extension, 
        ''' '.so’, ‘.dll’, ...).
        ''' This argument follows ... And so its name cannot be abbreviated.
        ''' This Is intended to add safety for packages, which can ensure by 
        ''' using this argument that no other package can override their 
        ''' external symbols, And also speeds up the search (see 'Note’).
        ''' </param>
        ''' <param name="arguments">
        ''' arguments to be passed to the compiled code. Up to 65 for .Call.
        ''' </param>
        ''' <param name="env"></param>
        ''' <returns>An R object constructed in the compiled code.</returns>
        <ExportAPI(".Call")>
        Public Function Rcall(NAME As String, PACKAGE As String,
                              <RListObjectArgument>
                              Optional arguments As list = Nothing,
                              Optional env As Environment = Nothing) As Object

            ' # This file was generated by Rcpp::compileAttributes
            ' # Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393
            '
            ' jaccard_coeff <- function(idx) {
            '    .Call('Rphenograph_jaccard_coeff', PACKAGE = 'Rphenograph', idx)
            ' }
            Throw New NotImplementedException
        End Function

        ''' <summary>
        ''' imports VB.NET namespace
        ''' </summary>
        ''' <param name="[namespace]">
        ''' only import of the instance method from 
        ''' the given types in the target namespace 
        ''' value.
        ''' </param>
        ''' <param name="env"></param>
        ''' <returns></returns>
        <ExportAPI(".Load")>
        Public Function Rload([namespace] As String, Optional env As Environment = Nothing) As Object
            Throw New NotImplementedException
        End Function
    End Module
End Namespace
