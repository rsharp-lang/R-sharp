install.packages("optparse")
install.packages("XML")
install.packages("base64enc")
datapath = "E:\\mzkit\\DATA\\nmr\\HMDB00005.nmrML"
nmrMLfiles = datapath
L<-length(nmrMLfiles)
sa <- NULL
snam <- NULL
I=1
i=1
tree <- xmlTreeParse(nmrMLfiles[i])
root <- xmlRoot(tree)
suppressPackageStartupMessages(library("optparse"))
suppressPackageStartupMessages(library("XML"))
print("XML loaded")
suppressPackageStartupMessages(library("base64enc"))
print("base64enc loaded")
tree <- xmlTreeParse(nmrMLfiles[i])
root <- xmlRoot(tree)
SFO1 <- as.double(xmlAttrs(xmlElementsByTagName(root, "irradiationFrequency", recursive = TRUE)[[1]])["value"])
SWH <-  as.double(xmlAttrs(xmlElementsByTagName(root, "sweepWidth", recursive = TRUE)[[1]])["value"])
SW <- SWH/SFO1
TD  <-  as.integer(xmlAttrs(xmlElementsByTagName(root, "DirectDimensionParameterSet", recursive = TRUE)[[1]])["numberOfDataPoints"])
TEMP <- as.double(xmlAttrs(xmlElementsByTagName(root, "sampleAcquisitionTemperature", recursive = TRUE)[[1]])["value"])
RELAXDELAY <- as.double(xmlAttrs(xmlElementsByTagName(root, "relaxationDelay", recursive = TRUE)[[1]])["value"])
SPINNINGRATE <- as.double(xmlAttrs(xmlElementsByTagName(root, "spinningRate", recursive = TRUE)[[1]])["value"])
PULSEWIDTH <- as.double(xmlAttrs(xmlElementsByTagName(root, "pulseWidth", recursive = TRUE)[[1]])["value"])
# Instrument
instrument <- xmlElementsByTagName(root, "instrumentConfiguration", recursive = TRUE)[[1]]
instrument.name <- xmlAttrs(xmlElementsByTagName(instrument,"cvParam")[[1]])["name"]
instrument.probe <- xmlAttrs(xmlElementsByTagName(instrument,"userParam")[[1]])["value"]
what <- "double"
endian <- "little"
sizeof <- 8
compression <- "gzip"
fidData <- xmlElementsByTagName(root, "fidData", recursive = TRUE)[["acquisition.acquisition1D.fidData"]]
fidData
b64string <- gsub("\n", "", xmlValue(fidData))
b64string
byteFormat <- xmlAttrs(fidData)["byteFormat"]
byteFormat
raws <- memDecompress(base64decode(b64string), type=compression)
raws
signal <- readBin(raws, n=length(raws), what=what, size=sizeof, endian = endian)
signal
datapath
signal
td <- length(signal)
rawR <- signal[seq(from = 1, to = td, by = 2)]
rawI <- signal[seq(from = 2, to = td, by = 2)]
rawR
mediar<-mean(as.integer(rawR[c((3*length(rawR)/4):length(rawR))]),na.rm = TRUE)
mediai<--mean(as.integer(rawI[c((3*length(rawR)/4):length(rawR))]),na.rm = TRUE)
mediar
mediai
help(".Call")
help(message)
install.packages("RANN")
require(RANN)
data("iris")
iris_unique <- unique(iris) # Remove duplicates
data <- as.matrix(iris_unique[,1:4])
data
k=10
nearest <- nn2(data, data, k, searchtype = "standard")
nearest
str(nearest)
i = nearest[[1]]
i
i[, -1]
head(i)
head(i[, -1])
install.packages("ggplot2")
install.packages("ggraph")
install.packages("dev_tools")
install.packages("devtools")
jet.colors(10)
require(graphics)
jet.colors(10)
palette
palette("jet")
help("palette")
mtcars
require(ggplot2)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(colour = factor(cyl)))
p + scale_colour_manual(values = c("red", "blue", "green"))
# It's recommended to use a named vector
cols <- c("8" = "red", "4" = "blue", "6" = "darkgreen", "10" = "orange")
p + scale_colour_manual(values = cols)
p <- ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(colour = factor(cyl)))
p + scale_colour_manual(values = c("red", "blue", "green"))
help(geom_point)
is.numeric
is.numeric("-9")
help(scale_colour_manual)
require(ggplot2)
help(scale_colour_manual)
install.packages("languageserver")
install.packages("languageserver")
install.packages("languageserver")
runif
as.integer(runif(1, 1, 3))
as.integer(runif(1, 1, 3))
clear()
as.integer(runif(1, 1, 3))
as.integer(runif(1, 1, 3))
help(ecdf)
x <- seq(-10, 10, by = .1)
# Choose the mean as 2.5 and standard deviation as 0.5.
y <- dnorm(x, mean = 2.5, sd = 0.5)
ï¼‰
plot(x,y)
ecdf
a = ecdf(x)
a
plot(x, a)
a(x)
plot(x, a(x))
x
# Create a sequence of numbers between -10 and 10 incrementing by 0.2.
x <- seq(-10,10,by = .2)
# Choose the mean as 2.5 and standard deviation as 2.
y <- pnorm(x, mean = 2.5, sd = 2)
plot(x,y)
install.packages("viridis")
require(viridis)
viridis(8, option = "A")
viridis
viridisLite::viridis.map
grDevices::colorRamp
viridis(12, option = "A")
viridis(12, option = "B")
viridis(12, option = "C")
viridis(12, option = "D")
viridis(12, option = "E")
viridis(12, option = "F")
viridis(12, option = "G")
viridis(12, option = "H")
require(gggplot2)
require(ggplot2)
help(element_text)
help("theme")
help(element_text)
help(theme)
require()ggplot2
require(ggplot2)
help("geom_histogram")
require(ggplot2)
help(ggtitle)
x=c("sdfsd","fsdf","sdf","sd")
x
x[2:20]
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("BgeeDB")
BiocManager::install("BgeeDB")
require(BgeeDB)
listBgeeSpecies()
bgee <- Bgee$new(species = "Danio_rerio", dataType = "rna_seq")
bgee
bgee <- Bgee$new(species = "Danio_rerio")
myTopAnatData <- loadTopAnatData(bgee)
log(0.5)
log(1)
log(0)
install.packages("topicmodels")
setwd("E:/GCModeller/src/R-sharp/tutorials/data/rda")
printHello = function(x) {}
printHello = function(x) { print("hello world!!!"); print(x);  }
printHello()
printHello(111)
save(printHello, file = "./func.rda")
