.\" man page create by R# package system.
.TH RCONVERSION 1 2002-May "as.list" "as.list"
.SH NAME
as.list \- Lists – Generic and Dotted Pairs
.SH SYNOPSIS
\fIas.list(\fBx\fR as any, 
..., 
[\fB<Environment>\fR]);\fR
.SH DESCRIPTION
.PP
Lists – Generic and Dotted Pairs
 
 Functions to construct, coerce and check for both kinds of R lists.
 Cast the raw dictionary object to R# list object
.PP
.SH OPTIONS
.PP
\fBx\fB \fR\- 
 object to be coerced or tested.
 this function will make a data copy if the input 
 data is already a @\fBT:SMRUCC.Rsharp.Runtime.Internal.Object.list\fR
. 
.PP
.PP
\fBargs\fB \fR\- 
 for dataframe type:
 
 + \fBbyrow\fR: logical, default is FALSE, means cast dataframe to list directly by column hash table values
 + \fBnames\fR: character, the column names that will be used as the list names
 
. 
.PP
.SH DETAILS
.PP
this function supports the generic function calls
 
 Almost all lists in R internally are Generic Vectors, whereas traditional 
 dotted pair lists (as in LISP) remain available but rarely seen by users 
 (except as formals of functions).
 
 The arguments To list Or pairlist are Of the form value Or tag = value. The 
 functions Return a list Or dotted pair list composed Of its arguments With
 Each value either tagged Or untagged, depending On how the argument was 
 specified.

 alist handles its arguments as if they described function arguments. So the 
 values are Not evaluated, And tagged arguments with no value are allowed 
 whereas list simply ignores them. alist Is most often used in conjunction 
 with formals.

 as.list attempts to coerce its argument to a list. For functions, this returns 
 the concatenation of the list of formal arguments And the function body. For 
 expressions, the list of constituent elements Is returned. as.list Is generic, 
 And as the default method calls as.vector(mode = "list") for a non-list, 
 methods for as.vector may be invoked. as.list turns a factor into a list of 
 one-element factors, keeping names. Other attributes may be dropped unless the 
 argument already Is a list Or expression. (This Is inconsistent with functions 
 such as as.character which always drop attributes, And Is for efficiency since 
 lists can be expensive to copy.)

 Is.list returns TRUE if And only if its argument Is a list Or a pairlist of 
 length > 0>0. Is.pairlist returns TRUE if And only if the argument Is a pairlist 
 Or NULL (see below).

 The "environment" method for as.list copies the name-value pairs (for names Not 
 beginning with a dot) from an environment to a named list. The user can request 
 that all named objects are copied. Unless sorted = TRUE, the list Is in no 
 particular order (the order depends on the order of creation of objects And whether 
 the environment Is hashed). No enclosing environments are searched. (Objects 
 copied are duplicated so this can be an expensive operation.) Note that there 
 Is an inverse operation, the as.environment() method for list objects.

 An empty pairlist, pairlist() Is the same As NULL. This Is different from list(): 
 some but Not all operations will promote an empty pairlist To an empty list.

 as.pairlist Is implemented as as.vector(x, "pairlist"), And hence will dispatch 
 methods for the generic function as.vector. Lists are copied element-by-element 
 into a pairlist And the names of the list used as tags for the pairlist the return 
 value for other types of argument Is undocumented.

 list, Is.list And Is.pairlist are primitive functions.
.PP
.SH SEE ALSO
RConversion
.SH FILES
.PP
REnv.dll
.PP
.SH COPYRIGHT
GPL3
